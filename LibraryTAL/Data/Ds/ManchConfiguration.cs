// <auto-generated>
// ReSharper disable RedundantUsingDirective
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable RedundantNameQualifier
// TargetFrameworkVersion = 4.52
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Data.Entity.Infrastructure;
using System.Linq.Expressions;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity;
using System.Data;
using System.Data.Entity.Core.Objects;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Data.Entity.ModelConfiguration;
using System.Threading;
using DatabaseGeneratedOption = System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption;

namespace LibraryTAL.Data.Designer
{
    // Manches
    public partial class ManchConfiguration : EntityTypeConfiguration<Manch>
    {
        public ManchConfiguration()
            : this("dbo")
        {
        }
 
        public ManchConfiguration(string schema)
        {
            ToTable(schema + ".Manches");
            HasKey(x => x.MancheId);

            Property(x => x.MancheId).HasColumnName("MancheID").IsRequired().HasColumnType("uniqueidentifier").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Shift).HasColumnName("Shift").IsRequired().HasColumnType("int");
            Property(x => x.PlayerId).HasColumnName("PlayerID").IsOptional().HasColumnType("uniqueidentifier");
            Property(x => x.RoundId).HasColumnName("RoundID").IsOptional().HasColumnType("uniqueidentifier");
            Property(x => x.TournamentId).HasColumnName("TournamentID").IsOptional().HasColumnType("uniqueidentifier");

            // Foreign keys
            HasOptional(a => a.Manch_TournamentId).WithMany(b => b.Manches).HasForeignKey(c => c.TournamentId); // FK__Manches__Tournam__1C5231C2
            HasOptional(a => a.Player).WithMany(b => b.Manches).HasForeignKey(c => c.PlayerId); // FK__Manches__PlayerI__1A69E950
            HasOptional(a => a.Round).WithMany(b => b.Manches).HasForeignKey(c => c.RoundId); // FK__Manches__RoundID__1B5E0D89
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
